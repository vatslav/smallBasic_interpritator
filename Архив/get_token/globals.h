#pragma once

#ifndef GLOBALS_SUBSYSTEM
#define GLOBALS_SYBSYSTEM

//#include <math.h>
#include <ctype.h> //тут лежа функции tolower toupper
#include <stdlib.h>
#include <stdio.h>
#include <string.h>


//#include "global_defines.h"




/******* Режимы работы get_token ***/
bool SimpleWork;
/* Нужно вот зачем: get_token при встрече идентификатора по умолчанию должна разбираться с тем, что это за идентификатор: VARIABLE CONSTANT или FUNCTION.
Если идентификатор не относится ни к одному из этих типов, то это неизвестный идентификатор - надо выдавать ошибку ERROR.
Но ведь при разборе описательных секций VAR и  CONST никаких переменных и констант ещё нет и надо просто молча считывать идентификатор.

Так вот, у нас есть два режима работы get_token:
SimpleWork = false -  сложный, когда мы по-честному работаем так, как заявлено в документации,
SimpleWork = true - и простой, когда для всех неизвестных идентификаторов мы возвращаем тип VARIABLE ( имея ввиду просто некий идентификатор ).

Этой переменной манипулируют функции ReadVAR и ReadCONST, в начале своего исполнения устанавливае её в true, а в конце - в false.*/



/******** Режмиы работы подсистемы variables ***************************/
bool VariablesAreForbidden;//Запрет на запрос значений переменных у подсистемы variables
//Нужен тогда, когда в секции var при объявлении массивов для указания диапазонов
//используются выражения, содержащие в себе константы. При этом так как программа ещё не начала выполняться,
// переменные в этих выражениях не могут использоваться.

/************** Зарезервированные слова  Паскаля *****************/


void serror( char* error )
{
	//пока всё незамысловато, но позже будет хитрее.
	printf( "%s\n", error );
}





#endif
