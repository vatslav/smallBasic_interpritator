#pragma once

#ifndef EXPRESSIONS
#define EXPRESSIONS


#include "global_defines.h"
#include "globals.h"
#include "get_token.h"
#include "variables.h"
#include <math.h>

//Заглушки, которые нужно реализовать в variables
struct variable getNumberFromVariable( char* name )
{
	struct variable answer;
	answer.type = INTEGER;
	answer . var = malloc(sizeof(int));
	*(int*)(answer.var) = 45;
	
	return answer;
}

struct variable getNumberFromConstant( char* name )
{
	struct variable answer;
	answer.type = INTEGER;
	answer . var = malloc(sizeof(int));
	*(int*)(answer.var) = 67;
	
	return answer;
}
//


bool level2(struct variable*), level3(struct variable*), level4(struct variable*), level5(struct variable*), unary( char, struct variable* ), arith( char, struct variable*, struct variable*), primitive( struct variable * );


bool ExecBuiltInMath( struct variable* );

/* Точки входа в анализатор. */

float get_exp_as_real( bool *ok )
{
	struct variable result;//вообще-то надо обнулить указатель, но за нас это сделает get_exp_abstract
	bool good = get_exp_abstract( &result );
	if(!good)
	{
		*ok = false;
		return 0;
	}
	
	*ok = true;
	
	if ( result.type == INTEGER )
		return (float)(*(int*)(result.var));
	else if (result.type == REAL )
		return *(float*)(result.var);
	else
	{
		serror("get_exp_as_real::Expected INTEGER or REAL in struct variable");
		*ok = false;
		return 0;
	}		

}
//TODO get_exp_as_integer





//расчитывает значение выражения. Нужно передать указатель на существующую ( пустую ) структуру variable,
// в которую и будет записан результат.
bool get_exp_abstract( struct variable* result )
{
  
  result -> var = 0;//чтоб не падало при выполнении free али ещё где.
  get_token();

  if( !*token )
  {
    serror("Expected lexem");
    return false;
  }
  bool ok = level2( result );
  if(!ok) return false;
  putback(); /* Возвращает последнюю считанную лексему обратно во входной поток */
  return true;
}

/* Сложение или вычитание двух термов */
bool level2( struct variable* result )
{
  register char op;
  struct variable hold;hold.var = 0;//обнулять указатель нужно ОБЯЗАТЕЛЬНО, а то падает программа.

  bool ok = level3( result );
  if(!ok) return false;
 
  while( ( op = *token) == '+' || op == '-' )
  {
    get_token();
    ok = level3( &hold );
	if(!ok) return false;
    
    //printf("result=%d, hold=%d\n", *(int*)(result->var), (hold.type) );
    //fflush(stdout);
    
    ok = arith( op, result, &hold );
   	if(!ok) return false;
  }
  
  return true;
}

/* Вычисление произведения или частного двух факторов */
bool level3( struct variable* result )
{
  register char op;
  struct variable hold;hold.var = 0;

  bool ok = level4( result );
  if( !ok ) return false;
  
  while( ( op = *token) == '*' || op == '/' || ( token_type == OPERATION && (op == 'd' || op == 'm')) )//d, m - div, mod
  {
    get_token();
    ok = level4( &hold );
    if ( !ok ) return false;
    
    ok = arith( op, result, &hold );
    if( !ok ) return false;
    
  }
  
  return true;
}



/* Унарный + или - */
bool level4( struct variable* result )
{
	register char op;
	
	op = 0;
	if ( ( token_type == OPERATION ) && *token == '+' || *token == '-' )
	{
		op = *token;
		get_token();
	}
	bool ok = level5( result );
	if( !ok ) return false;
	
	if( op )
		ok = unary( op, result );
	if ( !ok ) return false;
	
	return true;
}

/* Обработку выражения в круглых скобках */
bool level5( struct variable* result )
{
	bool ok;
	if( ( *token == '(' ) && ( token_type == DELIMITER ) )
	{
		get_token();
		ok = level2( result );
		if ( !ok ) return false;
		
		if ( *token != ')' )
		{
			serror("Expected ')'");
			return false;
		}
		get_token();
	}
	else
	{
		ok = primitive( result );
		if(!ok) return false;
	}
	
	return true;
}

/* Определение значения переменной по её имени */
bool primitive( struct variable* result )
{
	//printf("primitive: token=%s; type=%d\n", token, token_type );//111111111
	switch( token_type )
	{
		case VARIABLE:
		//getNumberFromVariable из подсистемы variables по имени переменной возвращает
		//структуру variable, содержащую тип и значение переменной, для массиво автоматически
		//считывает квадратные скобки и если это элемент массива ( индексов столько, сколько надо ), возвращает его описание, иначе
		//возвращает пустую структуру variable.
			*result = getNumberFromVariable( token );
			if ( result->type == 0 ) return false;//если не удалось получить значение
			get_token();
			return true;
			break;
		case CONSTANT:
			*result = getNumberFromConstant( token );
			get_token();
			return true;
			break;
		case INT_NUMBER:
			result -> type = INTEGER;
			int* d = (int*)malloc( sizeof( int ) );
			*d = atoi( token );
			result -> var = d;
			
			get_token();

			return true;
			break;
		case REAL_NUMBER:
			result -> type = REAL;
			float* dd = (float*)malloc( sizeof( float ) );
			*dd = atof( token );
			result -> var = dd;
			
			get_token();

			return true;
			break;
		case FUNCTION:
			{
				//printf("primitive::FUNCTION\n");
				//fflush(stdout);
				bool ok = ExecBuiltInMath( result );
	
				if(!ok) return false;
				else return true;
			}
			break;
		default:
			serror( "Expected identifier or variable"  ) ;
			return false;
	}
}

////// служебные функции /////////
//выполнение операций для INTEGER
bool int_arith( char o, int* r, int* h )
{
	register int t;
	
	switch( o )
	{
		case '-':
			*r = *r - *h;
			break;
		case '+':
			*r = *r + *h;
			break;
		case '*':
			*r = *r * *h;
			break;
		case '/':
		case 'd':
			
			if ( *h == 0 )
			{
				serror("Division by 0");
				return false;
			}
			*r = (*r)/(*h);
			break;
		case 'm':

			*r = (*r) % (*h);
			break;		  
	}
	return true;
}

//выполнение операций для REAL
bool float_arith( char o, float* r, float* h )
{
	register float t;
	
	switch( o )
	{
		case '-':
			*r = *r - *h;
			break;
		case '+':
			*r = *r + *h;
			break;
		case '*':
			*r = *r * *h;
			break;
		case '/':
			if ( *h == 0 )
			{
				serror("Division by 0");
				return false;
			}
			*r = (*r)/(*h);
			break;
		case 'm':
			serror("Expected integer variables for 'mod'");
			return false;
			break;
		case 'd':
			if ( *h == 0 )
			{
				serror("Division by 0");
				return false;
			}
			*r = (int)(*r)/(int)(*h);
			break;	  
	}
	
	return true;
}

//приведение типа INTEGER к типу REAL



/* Выполнение специфицированной арифметики */
bool arith( char op, struct variable* r, struct variable* h )
{
	
	
	if ( r -> type != h-> type )//если нужно приведение типов.
	{
		struct variable* lowest;
		if( r->type == INTEGER ) lowest = r;
		else if ( h->type == INTEGER ) lowest = h;
		else
		{
			serror("arith::Expected struct variable with type = INTEGER or REAL" );
			return false;
		}
		
		lowest -> type = REAL;
		int d = *(int*)(lowest->var);
		free( lowest->var );
		lowest -> var = malloc( sizeof( float ) );
		*(float*)(lowest->var) = (float)d;
		
	}
	
	if ( r-> type == INTEGER )
		return int_arith( op, (int*)(r->var), (int*)(h->var) );
	else if ( r -> type == REAL )
		return float_arith( op, (float*)(r->var), (float*)(h->var) );

	
}

/* Изменение знака */
bool unary( char o, struct variable* r )
{
	if ( o == '-' )
	{	
		if ( r-> type  == INTEGER )
			*(int*)(r->var) = -*(int*)(r->var);
		else if ( r->type == REAL )
			*(float*)(r->var) = -*(float*)(r->var);
		else
		{
			serror("unary: Expected struct variable with type = INTEGER or REAL");
			return false;
		}		
	}
	return true;
}




// Встроенные математические функцииbool ExecExp(), ExecLn(), ExecSin(), ExecSin();

bool ExecBuiltInMath( struct variable * result )
{
	
	char func = tok;//запоминаем внутреннее представление вызываемой математической функции.
	
	get_token();
	if( *token != '(' )
	{
		serror("Expected '('");
		return false;
	}
	
	bool ok;
	float arg = get_exp_as_real( &ok );
	if(!ok) return false;
	
	get_token();
	if( *token != ')' )
	{
		serror("Expected ')'");
		return false;
	}
	get_token();
	
	
	
	float r;
	switch( func )
	{
		case EXP:
			r = expf( arg );//f в конце имени функции означает, что она возвращает значение типа float. exp(arg) возвратила бы double. ! В C нет перегрузки функий!
			break;
		case LN:
			r = logf( arg );
			break;
		case SIN:
			r = sinf( arg );
			break;
		case COS:
			r = cosf( arg );
			break;
		default:
			serror("Error in ExecBuiltInMath");
			return false;
			
	}
	

	
	result -> type = REAL;
	if ( result->var ) free( result -> var );
	
	result -> var = malloc( sizeof(float) );
	
	*(float*)(result -> var) = r;
	
	
	return true;
	
}


#endif
