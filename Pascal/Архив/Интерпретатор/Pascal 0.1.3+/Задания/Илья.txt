******************** Илья ***********************************

Подсистема for. Заголовочный файл for.h.

Синтаксис:
for идентификатор := <выражение инициализации> to|downto <выражение конечное > do оператор

"идентификатором"  может быть только идентификатор простой переменной: только типа INTEGER . Элемент массива в качестве счётчика цикла недопустим.


bool ExecFor();
Удовлетворяет глобальным требованиям к реализации операторов - посему не описываю.
Эта функция просто выполняет оператор цикла for.

Не забудь реализовать PassFor(), которая не выполняет, а пропускает оператор цикла for.

Также не забудь, что циклы могут вложены друг в друга. Тебе придётся запоминать адрес начала цикла. А если вспомнить про возможную вложенность циклов , тебе нужно будет класть нужные данные в стек каждый раз перед выполнением тела цикла. 

Тебе пожалуй придётся поработать с переменными ( инкрементировать или декрементировать счётчик цикла ) - почитай у Лёши про это. я там более-менее описал. Ещё посмотри ОПИСАНИЕ интерпретатора по вопросу работы с переменными.


Если говорить строго, то мы должны запретить модификацию счётчика цикла в теле цикла. Но давайте хоть здесь в такие дебри не лезть.



______________________________
Подсистема if : заголовочный файл if.h.



bool ExecIf()
Выполняет условный оператор. При успешном выполнении возвращает true, иначе false.
При вызове функции текущей лексемой должна быть if ( то есть указатель prog  должен стоять после буквы 'f' ). 

По завершении выполнения текущей лексемой будет последняя лексема, относящаяся к оператору if (  последняя лексема оператора ветки else ИЛИ последняя лексема оператора основной ветки ).
- это я просто повторяю общие требования к реализации операторов.


Ещё раз другими словами:
if <логическое выражение> then оператор1 [ else оператор2] - квадратные скобки означают необязательность этой части.

Перед вызовом ExecIf prog стоит после "if"
После вызова ExecIf prog стоит после последней лексемы оператора if:
* после последней лексемы оператора2 при наличии ветки else
* после последней лексемы оператора1

Для выполнения оператор1 или оператор2 ты пользуешся функцией bool ExecOperator() - её описание смотри в задании Антона и Васи.
Для прыжка к ветке else пользуешся функцией bool PassOperator() ( опять же смотри у Антона и Васи ).

Внимательно прочитай описание функций Антона и Васи.

Ещё тебе нужно реализовать функцию bool PassIf() - которая просто пропускает условный оператор. Её отличие от ExecIf() только в том, что она никаких операторов не выполняет, никаких выражений не вычисляет. Требования же к ней такие же.



__________________________
Подсистема assignment.h - читай у Лёши.